#include <foo.hoo>

struct A {
	int a1;
	virtual void vfunc_a(int a2);
};

struct B : A {
	override vfunc_a;
	virtual void vfunc_b(int b2);
	int b1;
};

struct C : virtual A {
	int c1;
	override vfunc_a;
	virtual void vfunc_c(int c2);
};

struct D : B, C {
	int d1;
	override vfunc_a;
	override vfunc_b;
	override vfunc_c;
	virtual void vfunc_d(int d2, int d3);
};

struct E : D {
	int e1;
	override vfunc_b;
	override vfunc_d;
};

void E::vfunc_d(int d2, int d3)
{
	struct E *e;
	struct B *b;
	printf("E::vfunc_d(), b1=%d c1=%d d1=%d d2=%d d3=%d e1=%d\n", b1, c1, d1, d2, d3, e1);
	b = 2 + e + 2;
}

void C::test_c(void)
{
	printf("%d %d\n", a1, c1);
}

void D::test(void)
{
	test_c();
	printf("%d %d %d %d\n", a1, b1, c1, d1);
}

char foo::func()
{
	printf("%d\n", x + *y);
	x = *y;
	*y = x;
	y = &x;
}

double foo::func_new(int z)
{
	struct foo *x = get_x(), *x2;
	printf("%d\n", *y + z);
	func1(z);
	x->func();
	x2->func1(z);
	((struct foo*)(3 + x->get_foo(x2->func1(z))) + 5)->func();
}

void foo::vfunc(int arg1, int arg2)
{
	int b = func1(arg1);
}

void A::vfunc_a(int a2)
{
	printf("A::vfunc(%d)\n", a2);
}

void B::vfunc_a(void)
{
	printf("B::vfunc_a(), b1=%d\n", b1);
}

void B::vfunc_b(int b2)
{
	printf("B::vfunc_b(), b1=%d, b2=%d\n", b1, b2);
}

void C::vfunc_a(int a2)
{
	printf("C::vfunc_a(), a1=%d a2=%d b1=%d c1=%d\n", a1, a2, b1, c1);
}

void C::vfunc_c(int c2)
{
	printf("C::vfunc_c(), b1=%d c1=%d c2=%d\n", b1, c1, c2);
}

void D::vfunc_a(int a2)
{
	printf("D::vfunc_a(), a2=%d b1=%d c1=%d d1=%d\n", a2, b1, c1, d1);
}

void D::vfunc_b(int b2)
{
	printf("D::vfunc_b(), b1=%d, b2=%d, d1=%\n", b1, b2, d1);
}

void D::vfunc_c(int c2)
{
	printf("D::vfunc_c(), b1=%d c1=%d c2=%d d1=%d\n", b1, c1, c2, d1);
}

void D::vfunc_d(int d2, int d3)
{
	printf("D::vfunc_d(), b1=%d c1=%d d1=%d d2=%d d3=%d\n", b1, c1, d1, d2, d3);
}

void E::vfunc_b(int b2)
{
	printf("E::vfunc_b(), b1=%d b2=%d d1=% e1=%d\n", b1, b2, d1, e1);
}

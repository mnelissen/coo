#include <stdio.h>
#include <stdlib.h>

struct A {
	virtual void vfunc_a(int arg) = 0;
};

struct B : A {
 private:
	int b1, b2;
 protected:
	void init_B(void);
 public:
	override vfunc_a;
	virtual void vfunc_b(int arg);
	int get_b1(void);
	int get_b2(void);
};

struct C : A {
 protected:
	int c1, c2;
 public:
	override vfunc_a;
	int get_c1(void);
	int get_c2(void);
	void set_c1(int new_c1);
	virtual void handle_pass_C(int arg, C *C);
};

typedef void (*::integer_cb)(int arg);
typedef void (*::pass_C_cb)(int arg, C *c);

struct D : B, C {
	int d1, d2;
	pass_C_cb cb;
	void D();
	override vfunc_a;
	override handle_pass_C;
};

nozeroinit struct E : A {
	int e1, e2;
	E();
};

void A::vfunc_a(int arg)
{
	printf("A::vfunc_a(%d)\n", arg);
}

void B::vfunc_a(int arg)
{
	printf("B::vfunc_a(%d)\n", arg);
}

void B::vfunc_b(int arg)
{
	printf("B::vfunc_b(%d)\n", arg);
}

int B::get_b1(void)
{
	return b1;
}

int B::get_b2(void)
{
	return b2;
}

void B::init_B(void)
{
	b1 = 12, b2 = 13;
}

void C::vfunc_a(int arg)
{
	printf("C::vfunc_a(%d)\n", arg);
}

int C::get_c1(void)
{
	return c1;
}

void C::set_c1(int new_c1)
{
	c1 = new_c1;
}

int C::get_c2(void)
{
	return c2;
}

void C::handle_pass_C(int arg, C *C)
{
	printf("C::handle_pass_C %d %p %p", arg, this, C);
}

void D::vfunc_a(int arg)
{
	printf("D::vfunc_a(%d) %d %d\n", arg, c1, c2);
}

void D::D(void)
{
	integer_cb int_cb;
	C *c = this;
	init_B();
	c1 = 3, c2 = 25;
	d1 = 36, d2 = 37;
	cb = c->handle_pass_C;
	int_cb = set_c1;
	int_cb(24);
	if (c1 != 24)
		printf("ERROR, c1 should be 24, is %d\n", c1);
}

void D::handle_pass_C(int arg, C *C)
{
	printf("D::handle_pass_C c1=%d c2=%d %d %d\n", c1, c2, arg, (int)((char*)C-(char*)this));
}

void E::E(void)
{
	integer_cb cb;
	C c2();

	cb = A::vfunc_a;  /* TODO: fix this */
	cb(5);
	cb = c2.set_c1;
	cb(6);
}

int main(void)
{
	D *d = new D;
	A *a = d;
	B *b = dynamic_cast<B*>(a);
	C *c = dyn:a;
	E *e = dyn:a;
	d = dyn:a;
	d->vfunc_a(3);
	d->vfunc_b(4);
	a->vfunc_a(5);
	b->vfunc_b(6);
	c->vfunc_a(7);
	printf("offset a=%-2d\n", (int)((char*)a-(char*)d));
	printf("offset b=%-2d b1=%d b2=%d\n", (int)((char*)b-(char*)d), b->get_b1(), b->get_b2());
	printf("offset c=%-2d c1=%d c2=%d\n", (int)((char*)c-(char*)d), c->get_c1(), c->get_c2());
	printf("            d1=%d d2=%d\n", d->d1, d->d2);
	printf("e=0x%zu\n", (size_t)e);
	d->cb(48, d);
	delete d;
	return 0;
}


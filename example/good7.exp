#line 1 "good7.coo"
#include <stdio.h>     /* multiple inherit destructor test */

struct A {
	int *a;
	const struct coo_vmt *vmt;
};

#line 10 "good7.coo.c"
#include <coortl.h>
extern const struct A_vmt {
	struct coo_vmt vmt_base;
	void (*d_A)(struct A *this);
} A_vmt;

extern const struct A_coo_class A_coo_class;

struct A *new_A(int *init_a);
void A_A_root_zi(struct A *this, int *init_a);
void free_A(struct A *this);
struct A *A_A(struct A *this, int *init_a);
void A_d_A(struct A *this);
struct A *A_A_root(struct A *this, int *init_a);
#line 9 "good7.coo"
struct B {
	char *b;
	const struct coo_vmt *vmt;
};

#line 31 "good7.coo.c"
extern const struct B_vmt {
	struct coo_vmt vmt_base;
	void (*d_B)(struct B *this);
} B_vmt;

extern const struct B_coo_class B_coo_class;

struct B *new_B(char *init_b);
void B_B_root_zi(struct B *this, char *init_b);
void free_B(struct B *this);
struct B *B_B(struct B *this, char *init_b);
void B_d_B(struct B *this);
struct B *B_B_root(struct B *this, char *init_b);
#line 15 "good7.coo"
struct Z {
	int *z;
};

#line 50 "good7.coo.c"
struct Z *new_Z(int *init_z);
void Z_Z_zi(struct Z *this, int *init_z);
void free_Z(struct Z *this);
struct Z *Z_Z(struct Z *this, int *init_z);
void Z_d_Z(struct Z *this);
#line 21 "good7.coo"
struct C {
	struct A A;
	struct B B;
	struct Z z;
};

#line 63 "good7.coo.c"
extern const struct C_vmt {
	struct coo_vmt vmt_base;
	void (*d_C)(struct C *this);
} C_vmt;

extern const struct C_B_vmt {
	struct coo_vmt vmt_base;
	void (*d_C)(struct B *this);
} C_B_vmt;

extern const struct C_coo_class C_coo_class;

struct C *new_C(int *init_a, char *init_b, int *init_z);
void C_C_root_zi(struct C *this, int *init_a, char *init_b, int *init_z);
#define free_C(this) free_A(&(this)->A)
void C_d_C(struct C *this);
struct C *C_C(struct C *this, int *init_a, char *init_b, int *init_z);
struct C *C_C_root(struct C *this, int *init_a, char *init_b, int *init_z);
#line 26 "good7.coo"
struct A *A_A(struct A *this, int *init_a)
{
	this->a = init_a;
	*this->a = 10;
#line 87 "good7.coo.c"
	return this;
#line 30 "good7.coo"
}

void A_d_A(struct A *this)
{
	*this->a = 11;
}

struct B *B_B(struct B *this, char *init_b)
{
	this->b = init_b;
	*this->b = 20;
#line 101 "good7.coo.c"
	return this;
#line 41 "good7.coo"
}

void B_d_B(struct B *this)
{
	*this->b = 21;
}

struct Z *Z_Z(struct Z *this, int *init_z)
{
	this->z = init_z;
	*this->z = 30;
#line 115 "good7.coo.c"
	return this;
#line 52 "good7.coo"
}

void Z_d_Z(struct Z *this)
{
	*this->z = 31;
}

struct C *C_C(struct C *this, int *init_a, char *init_b, int *init_z)
{
	A_A(&this->A, init_a);
	B_B(&this->B, init_b);
	Z_Z(&this->z, init_z);
#line 130 "good7.coo.c"
	return this;
#line 64 "good7.coo"
}

int func(int *a, char *b, int *z)
{
	struct C c;
	int __coo_ret;
#line 68
	C_C_root_zi(&c, a, b, z);
#line 69
	printf("%d %d %d\n", *c.A.a, *c.B.b, *c.z.z);
	__coo_ret = 0;
#line 144 "good7.coo.c"
	C_d_C(&c);
	return __coo_ret;
#line 71 "good7.coo"
}

int main(void)
{
	int a, z;
	char b;

	func(&a, &b, &z);
	printf("%d %d %d\n", a, b, z);
}

#line 159 "good7.coo.c"
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#pragma pack(8)
const struct A_coo_class {
	uint32_t num_parents;
} A_coo_class = {
	0,
};

static void destroy_A(struct A *this)
{
	A_d_A(this);
	free(this);
}

const struct A_vmt A_vmt = {
	{ offsetof(struct A, vmt),
	  &A_coo_class },
	destroy_A,
};

struct A *new_A(int *init_a)
{
	struct A *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!A_A_root(this, init_a)) return free(this), NULL;
	return this;
}

void A_A_root_zi(struct A *this, int *init_a)
{
	memset(this, 0, sizeof(*this));
	A_A_root(this, init_a);
}

struct A *A_A_root(struct A *this, int *init_a)
{
	this->vmt = &A_vmt.vmt_base;
	return A_A(this, init_a);
}

void free_A(struct A *this)
{
	if (this == NULL)
		return;
	((struct A_vmt*)this->vmt)->d_A(this);
}

const struct B_coo_class {
	uint32_t num_parents;
} B_coo_class = {
	0,
};

static void destroy_B(struct B *this)
{
	B_d_B(this);
	free(this);
}

const struct B_vmt B_vmt = {
	{ offsetof(struct B, vmt),
	  &B_coo_class },
	destroy_B,
};

struct B *new_B(char *init_b)
{
	struct B *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!B_B_root(this, init_b)) return free(this), NULL;
	return this;
}

void B_B_root_zi(struct B *this, char *init_b)
{
	memset(this, 0, sizeof(*this));
	B_B_root(this, init_b);
}

struct B *B_B_root(struct B *this, char *init_b)
{
	this->vmt = &B_vmt.vmt_base;
	return B_B(this, init_b);
}

void free_B(struct B *this)
{
	if (this == NULL)
		return;
	((struct B_vmt*)this->vmt)->d_B(this);
}

const struct Z_coo_class {
	uint32_t num_parents;
} Z_coo_class = {
	0,
};

struct Z *new_Z(int *init_z)
{
	struct Z *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!Z_Z(this, init_z)) return free(this), NULL;
	return this;
}

void Z_Z_zi(struct Z *this, int *init_z)
{
	memset(this, 0, sizeof(*this));
	Z_Z(this, init_z);
}

void free_Z(struct Z *this)
{
	if (this == NULL)
		return;
	Z_d_Z(this);
	free(this);
}

const struct C_coo_class {
	uint32_t num_parents;
	uint32_t offsets[1];
	const void *parents[2];
} C_coo_class = {
	2,
	{ offsetof(struct C, B) },
	{ &A_coo_class,
	  &B_coo_class }
};

static void destroy_C(struct C *this)
{
	C_d_C(this);
	free(this);
}

const struct C_vmt C_vmt = {
	{ offsetof(struct C, A.vmt),
	  &C_coo_class },
	destroy_C,
};

static void destroy_C_B(struct B *__this)
{	struct C *this = container_of(__this, struct C, B);
	destroy_C(this);
}

const struct C_B_vmt C_B_vmt = {
	{ offsetof(struct C, B.vmt),
	  &C_coo_class },
	destroy_C_B,
};

struct C *new_C(int *init_a, char *init_b, int *init_z)
{
	struct C *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!C_C_root(this, init_a, init_b, init_z)) return free(this), NULL;
	return this;
}

void C_C_root_zi(struct C *this, int *init_a, char *init_b, int *init_z)
{
	memset(this, 0, sizeof(*this));
	C_C_root(this, init_a, init_b, init_z);
}

struct C *C_C_root(struct C *this, int *init_a, char *init_b, int *init_z)
{
	this->A.vmt = &C_vmt.vmt_base;
	this->B.vmt = &C_B_vmt.vmt_base;
	return C_C(this, init_a, init_b, init_z);
}

void C_d_C(struct C *this)
{
	Z_d_Z(&this->z);
	B_d_B(&this->B);
	A_d_A(&this->A);
}

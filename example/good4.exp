#line 1 "good4.coo"
#include <stdio.h>
#include <stdlib.h>

/*  plain      ----base-------   alt_base
      |       /     |         \   |
    inherit_sec	  inherit_pri  both
*/

struct S_plain {
	int a, b;
};

struct S_base {
	int c, d;
};

#line 19 "good4.coo.c"
struct S_base *new_S_base(void);
void S_base_S_base_zi(struct S_base *this);
void free_S_base(struct S_base *this);
struct S_base *S_base_S_base(struct S_base *this);
void S_base_d_S_base(struct S_base *this);
#line 19 "good4.coo"
struct S_inherit_pri {
	struct S_base S_base;
	int e, f;
};

#line 31 "good4.coo.c"
struct S_inherit_pri *new_S_inherit_pri(void);
void S_inherit_pri_S_base_zi(struct S_inherit_pri *this);
#define free_S_inherit_pri(this) free_S_base(&(this)->S_base)
void S_inherit_pri_func_pri(struct S_inherit_pri *this);
#line 24 "good4.coo"
struct S_inherit_sec {
	struct S_plain S_plain;
	struct S_base S_base;
	int g, h;
};

#line 43 "good4.coo.c"
struct S_inherit_sec *new_S_inherit_sec(void);
void S_inherit_sec_S_base_zi(struct S_inherit_sec *this);
void free_S_inherit_sec(struct S_inherit_sec *this);
void S_inherit_sec_func_sec(struct S_inherit_sec *this);
#line 29 "good4.coo"
struct S_alt_base {
	int a, b;
};

#line 53 "good4.coo.c"
struct S_alt_base *new_S_alt_base(void);
void S_alt_base_S_alt_base_zi(struct S_alt_base *this);
void free_S_alt_base(struct S_alt_base *this);
struct S_alt_base *S_alt_base_S_alt_base(struct S_alt_base *this);
void S_alt_base_d_S_alt_base(struct S_alt_base *this);
#line 35 "good4.coo"
struct S_both {
	struct S_base S_base;
	struct S_alt_base S_alt_base;
	int g, h;
};

#line 66 "good4.coo.c"
struct S_both *new_S_both(void);
void S_both_S_both_zi(struct S_both *this);
void free_S_both(struct S_both *this);
void S_both_func_both(struct S_both *this);
struct S_both *S_both_S_both(struct S_both *this);
void S_both_d_S_both(struct S_both *this);
#line 40 "good4.coo"
struct S_base *S_base_S_base(struct S_base *this)
{
	this->c = 10;
	this->d = 11;
#line 78 "good4.coo.c"
	return this;
#line 44 "good4.coo"
}

void S_base_d_S_base(struct S_base *this)
{
	this->c = -1;
}

void S_inherit_pri_func_pri(struct S_inherit_pri *this)
{
	printf("func_pri!\n");
}

void S_inherit_sec_func_sec(struct S_inherit_sec *this)
{
	printf("func_sec!\n");
}

struct S_alt_base *S_alt_base_S_alt_base(struct S_alt_base *this)
{
	this->a = 20;
	this->b = 21;
#line 102 "good4.coo.c"
	return this;
#line 65 "good4.coo"
}

void S_alt_base_d_S_alt_base(struct S_alt_base *this)
{
	this->a = -1;
}

void S_both_func_both(struct S_both *this)
{
	printf("func_both!\n");
}

int main(void)
{
	struct S_plain *no_destruct = (struct S_plain*)malloc(sizeof(struct S_plain));
	struct S_base *destruct = new_S_base();
	struct S_inherit_pri *destruct_pri = new_S_inherit_pri();
	struct S_inherit_sec *destruct_sec = new_S_inherit_sec();
	struct S_both *destruct_2 = new_S_both();
	free(no_destruct);
	free_S_base(destruct);
	free_S_inherit_pri(destruct_pri);
	free_S_inherit_sec(destruct_sec);
	free_S_both(destruct_2);
	return 0;
}


#line 133 "good4.coo.c"
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#pragma pack(8)
const struct S_base_coo_class {
	uint32_t num_parents;
} S_base_coo_class = {
	0,
};

struct S_base *new_S_base(void)
{
	struct S_base *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	return S_base_S_base(this);
}

void S_base_S_base_zi(struct S_base *this)
{
	memset(this, 0, sizeof(*this));
	S_base_S_base(this);
}

void free_S_base(struct S_base *this)
{
	S_base_d_S_base(this);
	free(this);
}

const struct S_both_coo_class {
	uint32_t num_parents;
} S_both_coo_class = {
	0,
};

struct S_both *new_S_both(void)
{
	struct S_both *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	return S_both_S_both(this);
}

void S_both_S_both_zi(struct S_both *this)
{
	memset(this, 0, sizeof(*this));
	S_both_S_both(this);
}

struct S_both *S_both_S_both(struct S_both *this)
{
	S_base_S_base(&this->S_base);
	S_alt_base_S_alt_base(&this->S_alt_base);
	return this;
}

void free_S_both(struct S_both *this)
{
	S_both_d_S_both(this);
	free(this);
}

void S_both_d_S_both(struct S_both *this)
{
	S_alt_base_d_S_alt_base(&this->S_alt_base);
	S_base_d_S_base(&this->S_base);
}

const struct S_inherit_sec_coo_class {
	uint32_t num_parents;
} S_inherit_sec_coo_class = {
	0,
};

struct S_inherit_sec *new_S_inherit_sec(void)
{
	struct S_inherit_sec *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	S_base_S_base(&this->S_base);
	return this;
}

void S_inherit_sec_S_base_zi(struct S_inherit_sec *this)
{
	memset(this, 0, sizeof(*this));
	S_base_S_base(&this->S_base);
}

void free_S_inherit_sec(struct S_inherit_sec *this)
{
	S_base_d_S_base(&this->S_base);
	free(this);
}

const struct S_alt_base_coo_class {
	uint32_t num_parents;
} S_alt_base_coo_class = {
	0,
};

struct S_alt_base *new_S_alt_base(void)
{
	struct S_alt_base *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	return S_alt_base_S_alt_base(this);
}

void S_alt_base_S_alt_base_zi(struct S_alt_base *this)
{
	memset(this, 0, sizeof(*this));
	S_alt_base_S_alt_base(this);
}

void free_S_alt_base(struct S_alt_base *this)
{
	S_alt_base_d_S_alt_base(this);
	free(this);
}

const struct S_inherit_pri_coo_class {
	uint32_t num_parents;
} S_inherit_pri_coo_class = {
	0,
};

struct S_inherit_pri *new_S_inherit_pri(void)
{
	struct S_inherit_pri *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	S_base_S_base(&this->S_base);
	return this;
}

void S_inherit_pri_S_base_zi(struct S_inherit_pri *this)
{
	memset(this, 0, sizeof(*this));
	S_base_S_base(&this->S_base);
}

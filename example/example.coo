#include <stdio.h>
#include <stdlib.h>
#include <foo.hoo>

typedef struct A {
	int a1;
	virtual void vfunc_a(int a2);
	void A();
} A;

struct B : A {
	override vfunc_a;
	virtual void vfunc_b(int b2);
	int b1;
	A a_local;
	void B();
};

struct C : virtual A {
	int c1;
	override vfunc_a;
	virtual void vfunc_c(int c2);
	virtual void vfunc_c3(int c3);
};

struct D : B, C {
	void D(A *a);
	int d1;
	override vfunc_a;
	override vfunc_b;
	override vfunc_c3;
	virtual void vfunc_d(A* a, B *b);
};

final struct E : D {
	int e1;
	override vfunc_b;
	override vfunc_d;
	void E(void);
	~E();
};

void C::test_c(void)
{
	printf("%d %d\n", a1, c1);
}

void D::test(void)
{
	test_c();
	printf("%d %d %d %d\n", a1, b1, c1, d1);
}

void * foo::get_foo(int a)
{
	printf("get_foo a=%d\n", a);
	return this;
}

char foo::func()
{
	printf("%d\n", x + *y);
	x = *y;
	*y = x;
	y = &x;
	return 0;
}

double foo::func_new(int z)
{
	struct foo *x = x->get_foo(2), *x2 = x;
	printf("%d\n", *y + *z);
	func1(z);
	x->func();
	x2->func1(z);
	((struct foo*)(3 + x->get_foo(x2->func1(z))) + 5)->func();
	return 1.0;
}

float foo::func1(void *p)
{
	return 1.0;
}

void foo::vfunc(int arg1, float *arg2)
{
	*arg2 = func1(&arg1);
}

void A::A(void)
{
	a1 = -1;
}

void A::vfunc_a(int arg)
{
	printf("A::vfunc(%d), a1=%d\n", arg, a1);
}

void B::B()
{
	A();
	a_local.A_root();
}

void B::vfunc_a(int arg)
{
	printf("B::vfunc_a(%d), a1=%d, b1=%d\n", arg, a1, b1);
}

void B::vfunc_b(int arg)
{
	printf("B::vfunc_b(%d), a1=%d, b1=%d\n", arg, a1, b1);
}

void C::vfunc_a(int arg)
{
	printf("C::vfunc_a(%d), a1=%d, c1=%d\n", arg, a1, c1);
}

void C::vfunc_c(int arg)
{
	A::vfunc_a(arg);
	printf("C::vfunc_c(%d), a1=%d, c1=%d\n", arg, a1, c1);
}

void C::vfunc_c3(int arg)
{
	A::vfunc_a(arg);
	printf("C::vfunc_c3(%d), a1=%d, c1=%d\n", arg, a1, c1);
}

void D::vfunc_a(int arg)
{
	printf("D::vfunc_a(%d), a1=%d, b1=%d c1=%d d1=%d\n", arg, a1, b1, c1, d1);
}

void D::vfunc_b(int arg)
{
	printf("D::vfunc_b(%d), a1=%d, b1=%d, d1=%d\n", arg, a1, b1, d1);
}

void D::vfunc_c3(int arg)
{
	printf("D::vfunc_c3(%d), a1=%d, b1=%d c1=%d d1=%d\n", arg, a1, b1, c1, d1);
}

void D::vfunc_d(A *a, B *b)
{
	printf("D::vfunc_d(a, b), a1=%d, b1=%d c1=%d d1=%d a->a1=%d b->b1=%d\n", a1, b1, c1, d1, a->a1, b->b1);
}

void D::D(A *a)
{
	b1 = -5;
	B();
}

void E::E(void)
{
	a1 = -6;
	D(this);
}

E::~E(void)
{
	a1 = -7;
}

void E::vfunc_b(int arg)
{
	printf("E::vfunc_b(%d), a1=%d, b1=%d d1=%d e1=%d\n", arg, a1, b1, d1, e1);
}

void E::vfunc_d(A *a, B *b)
{
	D::vfunc_d(a, b);
	printf("E::vfunc_d(a, b), a1=%d, b1=%d c1=%d d1=%d e1=%d a->a1=%d b->b1=%d\n",
		a1, b1, c1, d1, e1, a->a1, b->b1);
}

int main(int argc, char **argv)
{
	A a, a_a;
	int aa1 = a.a1;
	B b;
	C c;
	D d(&c); int db1 = d.b1;
	E e, *p_e;

	a.a1 = 10;
	a.vfunc_a(11);

	b.a1 = 20;
	b.b1 = 21;
	b.vfunc_a(22);
	b.vfunc_b(23);
	if (b.a1 < 10)
		return -1;

	E e2;
	c.a1 = 30;
	c.c1 = 31;
	c.vfunc_a(32);
	c.vfunc_c(33);

	d.a1 = 40;
	d.b1 = 41;
	d.c1 = 42;
	d.d1 = 43;
	d.vfunc_a(44);
	d.vfunc_b(45);
	d.vfunc_c(46);
	d.vfunc_d(&e, &e);

	e.a1 = 50;
	e.b1 = 51;
	e.c1 = 52;
	e.d1 = 53;
	e.e1 = 54;
	e.vfunc_a(55);
	e.vfunc_b(56);
	e.vfunc_c(57);
	e.vfunc_c3(58);
	e.vfunc_d(&e, &e);
	if (e.c1 < 33)
		return -2;

	(p_e = new E)->vfunc_a(-1);
	delete p_e;
	p_e = &e2;
	p_e->a1 = 60;
	p_e->b1 = 61;
	p_e->c1 = 62;
	p_e->d1 = 63;
	p_e->e1 = 64;
	p_e->vfunc_a(65);
	p_e->vfunc_b(66);
	p_e->vfunc_c(67);
	p_e->vfunc_d(&e, &e);

	/* silence warnings */
	printf("%d %d\n", aa1, db1);

	return 0;
}

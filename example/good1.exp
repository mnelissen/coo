#line 1 "good1.coo"
#include <stdio.h>
#include <stdlib.h>

struct /* C comment */ A {
	const struct coo_vmt *vmt;
};

#line 10 "good1.coo.c"
#include <coortl.h>
extern const struct A_vmt {
	struct coo_vmt vmt_base;
	void (*vfunc_a)(struct A *this, int arg);
} A_vmt;

extern const struct A_coo_class A_coo_class;

#line 8 "good1.coo"
struct B {
	struct A A;
	int b1, b2;
};

#line 25 "good1.coo.c"
extern const struct B_vmt {
	struct coo_vmt vmt_base;
	void (*vfunc_a)(struct B *this, int arg);
	void (*vfunc_b)(struct B *this, int arg);
} B_vmt;

extern const struct B_coo_class B_coo_class;

struct B *new_B(void);
void B_B_root_zi(struct B *this);
void B_vfunc_a(struct B *this, int arg);
void B_init_B(struct B *this);
void B_vfunc_b(struct B *this, int arg);
int B_get_b1(struct B *this);
int B_get_b2(struct B *this);
struct B *B_B_root(struct B *this);
#line 20 "good1.coo"
struct C {
	struct A A;    /* redundant public */
	int c1, c2;
};

#line 48 "good1.coo.c"
extern const struct C_vmt {
	struct coo_vmt vmt_base;
	void (*vfunc_a)(struct C *this, int arg);
	void (*handle_pass_C)(struct C *this, int arg, struct C *C);
} C_vmt;

extern const struct C_coo_class C_coo_class;

struct C *new_C(void);
void C_C_root_zi(struct C *this);
void C_vfunc_a(struct C *this, int arg);
int C_get_c1(struct C *this);
int C_get_c2(struct C *this);
void C_set_c1(struct C *this, int new_c1);
void C_handle_pass_C(struct C *this, int arg, struct C *C);
struct C *C_C_root(struct C *this);
#line 31 "good1.coo"
typedef /* test typedef newline split
           multiline comment */
  struct {
	void *obj;
	void (*func)(void *this, int arg);
} integer_cb;
typedef struct {
	void *obj;
	void (*func)(void *this, int arg, struct C *c);
} pass_C_cb;

struct D {
	struct B B;
	struct C C;
	int d1, d2;
	pass_C_cb cb;
};

#line 84 "good1.coo.c"
extern const struct D_vmt {
	struct coo_vmt vmt_base;
	void (*vfunc_a)(struct D *this, int arg);
	void (*vfunc_b)(struct B *this, int arg);
} D_vmt;

extern const struct D_C_vmt {
	struct coo_vmt vmt_base;
	void (*vfunc_a)(struct A *this, int arg);
	void (*handle_pass_C)(struct C *this, int arg, struct C *C);
} D_C_vmt;

extern const struct D_coo_class D_coo_class;

struct D *new_D(void);
void D_D_root_zi(struct D *this);
void D_vfunc_a(struct D *this, int arg);
void D_handle_pass_C(struct C *this, int arg, struct C *C);
struct D *D_D(struct D *this);
struct D *D_D_root(struct D *this);
#line 44 "good1.coo"
struct E {
	struct A A;
	int e1, e2;
};

#line 111 "good1.coo.c"
extern const struct E_coo_class E_coo_class;

struct E *E_E(struct E *this);
#line 49 "good1.coo"
void A_vfunc_a(struct A *this, int arg)
{
	printf("A::vfunc_a(%d)\n", arg);
}

void B_vfunc_a(struct B *this, int arg)
{
	printf("B::vfunc_a(%d)\n", arg);
}

void B_vfunc_b(struct B *this, int arg)
{
	printf("B::vfunc_b(%d)\n", arg);
}

int B_get_b1(struct B *this)
{
	return this->b1;
}

int B_get_b2(struct B *this)
{
	return this->b2;
}

void B_init_B(struct B *this)
{
	this->b1 = 12, this->b2 = 13;
}

void C_vfunc_a(struct C *this, int arg)
{
	printf("C::vfunc_a(%d)\n", arg);
}

int C_get_c1(struct C *this)
{
	return this->c1;
}

void C_set_c1(struct C *this, int new_c1)
{
	this->c1 = new_c1;
}

int C_get_c2(struct C *this)
{
	return this->c2;
}

void C_handle_pass_C(struct C *this, int arg, struct C *C)
{
	printf("C::handle_pass_C %d %d\n", arg, this == C);
}

void D_vfunc_a(struct D *this, int arg)
{
	printf("D::vfunc_a(%d) %d %d\n", arg, this->C.c1, this->C.c2);
}

struct D *D_D(struct D *this)
{
	integer_cb int_cb;
	struct C *c = &this->C;
	B_init_B(&this->B);
	this->C.c1 = 3, this->C.c2 = 25;
	this->d1 = 36, this->d2 = 37;
	{ struct C *coo_obj0 = c; void (*coo_fv0)(struct C *this, int arg, struct C *C) = ((struct C_vmt*)coo_obj0->A.vmt)->handle_pass_C; pass_C_cb coo_mv0 = { coo_obj0, (void (*)())coo_fv0 }; this->cb = coo_mv0; }
	{ struct C *coo_obj0 = &this->C; void (*coo_fv0)(struct C *this, int new_c1) = C_set_c1; integer_cb coo_mv0 = { coo_obj0, (void (*)())coo_fv0 }; int_cb = coo_mv0; }
	int_cb.func(int_cb.obj, 24);
	if (this->C.c1 != 24)
		printf("ERROR, c1 should be 24, is %d\n", this->C.c1);
#line 188 "good1.coo.c"
	return this;
#line 121 "good1.coo"
}

void D_handle_pass_C(struct C *__this, int arg, // C++ comment in parameter list
	struct C *C)
{	struct D *this = container_of(__this, struct D, C.A);
	printf("D::handle_pass_C c1=%d c2=%d %d %d\n", this->C.c1, this->C.c2, arg, (int)((char*)C-(char*)this));
}

struct E *E_E(struct E *this)
{
	integer_cb cb;
	struct C c2;

#line 132
	C_C_root_zi(&c2);
#line 134
	{ struct A *coo_obj0 = &this->A; void (*coo_fv0)(struct A *this, int arg) = A_vfunc_a; integer_cb coo_mv0 = { coo_obj0, (void (*)())coo_fv0 }; cb = coo_mv0; }  /* TODO: fix this */
	cb.func(cb.obj, 5);
	{ struct C *coo_obj0 = &c2; void (*coo_fv0)(struct C *this, int new_c1) = C_set_c1; integer_cb coo_mv0 = { coo_obj0, (void (*)())coo_fv0 }; cb = coo_mv0; }
	cb.func(cb.obj, 6);
#line 211 "good1.coo.c"
	return this;
#line 138 "good1.coo"
}

int main(void)
{
	struct D *d = new_D();
	struct A *a = &d->B.A;
	struct B *b = coo_dyn_cast(&B_coo_class, &(a)->vmt);
	struct C *c = coo_dyn_cast(&C_coo_class, &a->vmt);
	struct E *e = coo_dyn_cast(&E_coo_class, &a->vmt);
	void (*cb2)(struct C* th, int arg, struct C *C);
	pass_C_cb cb3;

	d = coo_dyn_cast(&D_coo_class, &a->vmt);
	((struct A_vmt*)d->B.A.vmt)->vfunc_a(&d->B.A, 3);
	((struct B_vmt*)d->B.A.vmt)->vfunc_b(&d->B, 4);
	((struct A_vmt*)a->vmt)->vfunc_a(a, 5);
	((struct B_vmt*)b->A.vmt)->vfunc_b(b, 6);
	((struct A_vmt*)c->A.vmt)->vfunc_a(&c->A, 7);
	printf("offset a=%-2d\n", (int)((char*)a-(char*)d));
	printf("offset b=%-2d b1=%d b2=%d\n", (int)((char*)b-(char*)d), B_get_b1(b), B_get_b2(b));
	printf("offset c=%-2d c1=%d c2=%d\n", (int)((char*)c-(char*)d), C_get_c1(c), C_get_c2(c));
	printf("            d1=%d d2=%d\n", d->d1, d->d2);
	printf("e=0x%zu\n", (size_t)e);
	d->cb.func(d->cb.obj, 48, &d->C);
	cb2 = C_handle_pass_C;
	cb2(c, 50, &d->C);
	{ struct C *coo_obj0 = c; void (*coo_fv0)(struct C *this, int arg, struct C *C) = ((struct C_vmt*)coo_obj0->A.vmt)->handle_pass_C; pass_C_cb coo_mv0 = { coo_obj0, (void (*)())coo_fv0 }; cb3 = coo_mv0; }
	cb3.func(cb3.obj, 51, &d->C);
	free(d);
	return 0;
}


#line 247 "good1.coo.c"
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#pragma pack(8)
const struct A_coo_class {
	uint32_t num_parents;
} A_coo_class = {
	0,
};

const struct B_coo_class {
	uint32_t num_parents;
	const void *parents[1];
} B_coo_class = {
	1,
	{ &A_coo_class }
};

const struct B_vmt B_vmt = {
	{ offsetof(struct B, A.vmt),
	  &B_coo_class },
	B_vfunc_a,
	B_vfunc_b,
};

struct B *new_B(void)
{
	struct B *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!B_B_root(this)) return free(this), NULL;
	return this;
}

void B_B_root_zi(struct B *this)
{
	memset(this, 0, sizeof(*this));
	B_B_root(this);
}

struct B *B_B_root(struct B *this)
{
	this->A.vmt = &B_vmt.vmt_base;
	return this;
}

const struct C_coo_class {
	uint32_t num_parents;
	const void *parents[1];
} C_coo_class = {
	1,
	{ &A_coo_class }
};

const struct C_vmt C_vmt = {
	{ offsetof(struct C, A.vmt),
	  &C_coo_class },
	C_vfunc_a,
	C_handle_pass_C,
};

struct C *new_C(void)
{
	struct C *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!C_C_root(this)) return free(this), NULL;
	return this;
}

void C_C_root_zi(struct C *this)
{
	memset(this, 0, sizeof(*this));
	C_C_root(this);
}

struct C *C_C_root(struct C *this)
{
	this->A.vmt = &C_vmt.vmt_base;
	return this;
}

const struct D_coo_class {
	uint32_t num_parents;
	uint32_t offsets[1];
	const void *parents[2];
} D_coo_class = {
	2,
	{ offsetof(struct D, C) },
	{ &B_coo_class,
	  &C_coo_class }
};

const struct D_vmt D_vmt = {
	{ offsetof(struct D, B.A.vmt),
	  &D_coo_class },
	D_vfunc_a,
	B_vfunc_b,
};

static void D_C_vfunc_a(struct A *__this, int arg)
{	struct D *this = container_of(__this, struct D, C.A);
	D_vfunc_a(this, arg);
}

const struct D_C_vmt D_C_vmt = {
	{ offsetof(struct D, C.A.vmt),
	  &D_coo_class },
	D_C_vfunc_a,
	D_handle_pass_C,
};

struct D *new_D(void)
{
	struct D *this = calloc(1, sizeof(*this));
	if (this == NULL) return NULL;
	if (!D_D_root(this)) return free(this), NULL;
	return this;
}

void D_D_root_zi(struct D *this)
{
	memset(this, 0, sizeof(*this));
	D_D_root(this);
}

struct D *D_D_root(struct D *this)
{
	this->B.A.vmt = &D_vmt.vmt_base;
	this->C.A.vmt = &D_C_vmt.vmt_base;
	return D_D(this);
}

const struct E_coo_class {
	uint32_t num_parents;
	const void *parents[1];
} E_coo_class = {
	1,
	{ &A_coo_class }
};
